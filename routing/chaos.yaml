# all of these rules can be used together with some extra traffic management options, like header based routing (e.g. you can send beta users straight to a faulty version in production to increase failure awareness)

#this example injects a 5xx abort to a percentual of the traffic
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: virtual-service-name
  namespace: your-namespace
spec:
  hosts:
    - yourapp.your-namespace.svc.cluster.local # dns to be intercepted
  http:
    - fault:
      abort:
        httpStatus: 500 # you can add any code here
        percentage:
          value: 100
    route:
    - destination:
        host: yourapp.your-namespace.svc.cluster.local #target dns or rule
        subset: v1 # target subset, can be omitted

---
# this example adds a simple delay to the service call, can be very useful to help create performing app
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: virtual-service-name
  namespace: your-namespace
spec:
  hosts:
    - yourapp.your-namespace.svc.cluster.local # dns to be intercepted
  http:
    - fault:
      delay:
        fixedDelay: 7s # adds a delay to every request
        percentage:
          value: 100
    route:
    - destination:
        host: yourapp.your-namespace.svc.cluster.local # target dns with subset rule removed
